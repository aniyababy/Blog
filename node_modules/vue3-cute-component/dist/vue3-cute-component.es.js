var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
import { defineComponent, useCssVars, openBlock, createElementBlock, renderSlot, ref, reactive, computed, onMounted, useSlots, normalizeStyle, unref, createElementVNode, normalizeClass, toDisplayString, createCommentVNode } from "vue";
var Timeline_vue_vue_type_style_index_0_lang = "";
const _hoisted_1$1 = { class: "timeline" };
const __default__$3 = defineComponent({
  name: "Timeline"
});
const _sfc_main$3 = /* @__PURE__ */ defineComponent(__spreadProps(__spreadValues({}, __default__$3), {
  props: {
    theme: { type: String, required: false, default: "#dbdde0" },
    background: { type: String, required: false, default: "#fff" }
  },
  setup(__props) {
    useCssVars((_ctx) => ({
      "7697135b-theme": __props.theme,
      "7697135b-background": __props.background
    }));
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("ul", _hoisted_1$1, [
        renderSlot(_ctx.$slots, "default")
      ]);
    };
  }
}));
const useInit = (props) => {
  const othersRef = ref();
  const slotOthers = ref(false);
  const iconSizeData = reactive({
    small: {
      top: ".28em",
      left: "-34px",
      width: "10px",
      height: "10px"
    },
    medium: {
      top: "0em",
      left: "-39.5px",
      height: "20px",
      width: "20px"
    },
    large: {
      top: "-0.5em",
      left: "-44px",
      height: "30px",
      width: "30px"
    }
  });
  const circleStyle = computed(() => {
    if (!props.bgColor && !props.lineColor && !props.hollow && !props.iconSize)
      return;
    let style = {};
    if (props.bgColor) {
      style = {
        "border-color": props.bgColor,
        "background-color": props.bgColor
      };
    }
    if (props.lineColor)
      style["border-color"] = props.lineColor;
    if (iconSizeData[props.iconSize])
      style = Object.assign({}, style, iconSizeData[props.iconSize]);
    return style;
  });
  const itemStyle = computed(() => {
    return {
      color: props.fontColor
    };
  });
  const slotClass = computed(() => {
    let className = "";
    slotOthers.value && (className = "timeline-others");
    props.hollow && (className = "hollow");
    return className;
  });
  onMounted(() => {
    slotOthers.value = !!useSlots().others;
  });
  return { circleStyle, itemStyle, slotClass, othersRef };
};
const __default__$2 = defineComponent({
  name: "TimelineItem"
});
const _sfc_main$2 = /* @__PURE__ */ defineComponent(__spreadProps(__spreadValues({}, __default__$2), {
  props: {
    bgColor: { type: String, required: false },
    lineColor: { type: String, required: false },
    hollow: { type: Boolean, required: false, default: false },
    iconSize: { type: String, required: false },
    fontColor: { type: String, required: false, default: "#37414a" }
  },
  setup(__props) {
    const props = __props;
    const { slotClass, circleStyle, itemStyle, othersRef } = useInit(props);
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("li", {
        style: normalizeStyle(unref(itemStyle)),
        class: "timeline-item"
      }, [
        createElementVNode("div", {
          ref_key: "othersRef",
          ref: othersRef,
          style: normalizeStyle(unref(circleStyle)),
          class: normalizeClass([unref(slotClass), "timeline-circle"])
        }, [
          renderSlot(_ctx.$slots, "others")
        ], 6),
        renderSlot(_ctx.$slots, "default")
      ], 4);
    };
  }
}));
const __default__$1 = defineComponent({
  name: "TimelineTitle"
});
const _sfc_main$1 = /* @__PURE__ */ defineComponent(__spreadProps(__spreadValues({}, __default__$1), {
  props: {
    bgColor: { type: String, required: false },
    lineColor: { type: String, required: false },
    hollow: { type: Boolean, required: false, default: false },
    iconSize: { type: String, required: false },
    fontColor: { type: String, required: false, default: "#37414a" }
  },
  setup(__props) {
    const props = __props;
    const { slotClass, circleStyle, itemStyle, othersRef } = useInit(props);
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("li", {
        style: normalizeStyle(unref(itemStyle)),
        class: "timeline-title"
      }, [
        createElementVNode("div", {
          ref_key: "othersRef",
          ref: othersRef,
          style: normalizeStyle(unref(circleStyle)),
          class: normalizeClass([unref(slotClass), "timeline-circle timeline-title-circle"])
        }, [
          renderSlot(_ctx.$slots, "others")
        ], 6),
        renderSlot(_ctx.$slots, "default")
      ], 4);
    };
  }
}));
const blue = {
  textColor: "hsl(208, 50%, 40%)",
  backgroundColor: "hsl(208, 100%, 75%)",
  textBoxShadow: `inset rgba(255,254,255,0.6) 0 0.3em .3em, inset rgba(0,0,0,0.15) 0 -0.1em .3em, /* inner shadow */ 
  hsl(208, 50%, 55%) 0 .1em 3px, hsl(208, 50%, 40%) 0 .3em 1px, /* color border */
  rgba(0,0,0,0.2) 0 .5em 5px`,
  hoverBackgroundColor: "hsl(208, 100%, 83%)",
  activeBgImage: "-webkit-gradient(radial, 50% 0, 100, 50% 0, 0, from( rgba(255,255,255,0) ), to( rgba(255,255,255,0) ))",
  activeBoxShadow: `inset rgba(255,255,255,0.6) 0 0.3em .3em, inset rgba(0,0,0,0.2) 0 -0.1em .3em, /* inner shadow */ 
  rgba(0,0,0,0.4) 0 .1em 1px, /* border */
  rgba(0,0,0,0.2) 0 .2em 6px`,
  activeTextShadow: ""
};
const pink = {
  textColor: "hsl(340, 100%, 30%)",
  backgroundColor: "hsl(340, 100%, 75%)",
  textBoxShadow: `inset rgba(255,254,255,0.6) 0 0.3em .3em, inset rgba(0,0,0,0.15) 0 -0.1em .3em, /* inner shadow */ 
  hsl(340, 70%, 50%) 0 .1em 3px, hsl(340, 80%, 40%) 0 .3em 1px, /* color border */
  rgba(0,0,0,0.2) 0 .5em 5px`,
  hoverBackgroundColor: "hsl(340, 100%, 83%)",
  activeBgImage: "-webkit-gradient(radial, 50% 0, 100, 50% 0, 0, from( rgba(255,255,255,0) ), to( rgba(255,255,255,0) ))",
  activeBoxShadow: `inset rgba(255,255,255,0.6) 0 0.3em .3em, inset rgba(0,0,0,0.2) 0 -0.1em .3em, /* inner shadow */ 
  rgba(0,0,0,0.4) 0 .1em 1px, /* border */
  rgba(0,0,0,0.2) 0 .2em 6px`,
  activeTextShadow: ""
};
const glass = {
  textColor: "hsl(88, 70%, 30%)",
  backgroundColor: "hsl(88, 70%, 60%)",
  textBoxShadow: `inset rgba(255,254,255,0.6) 0 0.3em .3em, inset rgba(0,0,0,0.15) 0 -0.1em .3em, /* inner shadow */ 
  hsl(88, 70%, 40%) 0 .1em 3px, hsl(88, 70%, 30%) 0 .3em 1px, /* color border */
  rgba(0,0,0,0.2) 0 .5em 5px`,
  hoverBackgroundColor: "hsl(88, 70%, 75%)",
  activeBgImage: "-webkit-gradient(radial, 50% 0, 100, 50% 0, 0, from( rgba(255,255,255,0) ), to( rgba(255,255,255,0) ))",
  activeTextShadow: "rgb(255 255 255 / 30%) 0 1px 0, rgb(0 0 0 / 15%) 0 0.18em 0.15em",
  activeBoxShadow: ""
};
const orange = {
  textColor: "hsl(39, 100%, 30%)",
  backgroundColor: "hsl(39, 100%, 50%)",
  textBoxShadow: `inset rgba(255,254,255,0.6) 0 0.3em .3em, inset rgba(0,0,0,0.15) 0 -0.1em .3em, /* inner shadow */ 
  hsl(39, 100%, 40%) 0 .1em 3px, hsl(39, 100%, 30%) 0 .3em 1px, /* color border */
  rgba(0,0,0,0.2) 0 .5em 5px`,
  hoverBackgroundColor: "hsl(39, 100%, 65%)",
  activeBgImage: "-webkit-gradient(radial, 50% 0, 100, 50% 0, 0, from( rgba(255,255,255,0) ), to( rgba(255,255,255,0) ))",
  activeTextShadow: "",
  activeBoxShadow: ""
};
const gray = {
  textColor: "hsl(0, 0%, 40%)",
  backgroundColor: "hsl(0, 0%, 75%)",
  textBoxShadow: `inset rgba(255,254,255,0.6) 0 0.3em .3em, inset rgba(0,0,0,0.15) 0 -0.1em .3em, /* inner shadow */ 
  hsl(0, 0%, 60%) 0 .1em 3px, hsl(0, 0%, 45%) 0 .3em 1px, /* color border */
  rgba(0,0,0,0.2) 0 .5em 5px`,
  hoverBackgroundColor: "hsl(0, 0%, 83%)",
  activeBgImage: "-webkit-gradient(radial, 50% 0, 100, 50% 0, 0, from( rgba(255,255,255,0) ), to( rgba(255,255,255,0) ))",
  activeTextShadow: "",
  activeBoxShadow: `inset rgba(255,255,255,0.6) 0 0.3em .3em, inset rgba(0,0,0,0.2) 0 -0.1em .3em, /* inner shadow */ 
  rgba(0,0,0,0.4) 0 .1em 1px, /* border */
  rgba(0,0,0,0.2) 0 .2em 6px`
};
const typeConfig = {
  blue,
  pink,
  glass,
  orange,
  gray
};
var index_vue_vue_type_style_index_0_lang = "";
const _hoisted_1 = ["data-icon"];
const _hoisted_2 = { key: 0 };
const __default__ = defineComponent({
  name: "GdButton"
});
const _sfc_main = /* @__PURE__ */ defineComponent(__spreadProps(__spreadValues({}, __default__), {
  props: {
    text: { type: String, required: false, default: "\u6309\u94AE" },
    icon: { type: String, required: false, default: "\u2730" },
    color: { type: String, required: false, default: "blue" },
    fontSize: { type: String, required: false, default: "16px" },
    padding: { type: String, required: false, default: ".5em 1.2em .4em 1.2em" },
    type: { type: String, required: false, default: "bracket" },
    onlyIcon: { type: Boolean, required: false, default: false }
  },
  setup(__props) {
    const props = __props;
    useCssVars((_ctx) => ({
      "cf1b9d0e-textColor": unref(textColor),
      "cf1b9d0e-backgroundColor": unref(backgroundColor),
      "cf1b9d0e-textBoxShadow": unref(textBoxShadow),
      "cf1b9d0e-padding": __props.padding,
      "cf1b9d0e-fontSize": __props.fontSize,
      "cf1b9d0e-hoverBackgroundColor": unref(hoverBackgroundColor),
      "cf1b9d0e-activeBgImage": unref(activeBgImage),
      "cf1b9d0e-activeBoxShadow": unref(activeBoxShadow),
      "cf1b9d0e-activeTextShadow": unref(activeTextShadow)
    }));
    const { textColor, backgroundColor, textBoxShadow, hoverBackgroundColor, activeBgImage, activeBoxShadow, activeTextShadow } = typeConfig[props.color || "blue"];
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("div", {
        class: normalizeClass(["gd-button", [__props.type, __props.onlyIcon ? "icon" : ""]]),
        "data-icon": __props.icon
      }, [
        !__props.onlyIcon ? (openBlock(), createElementBlock("span", _hoisted_2, toDisplayString(__props.text), 1)) : createCommentVNode("v-if", true)
      ], 10, _hoisted_1);
    };
  }
}));
const plugin = {
  install(app) {
    app.component(_sfc_main$3.name, _sfc_main$3);
    app.component(_sfc_main$1.name, _sfc_main$1);
    app.component(_sfc_main$2.name, _sfc_main$2);
    app.component(_sfc_main.name, _sfc_main);
  }
};
export { _sfc_main as GdButton, _sfc_main$3 as Timeline, _sfc_main$2 as TimelineItem, _sfc_main$1 as TimelineTitle, plugin };
