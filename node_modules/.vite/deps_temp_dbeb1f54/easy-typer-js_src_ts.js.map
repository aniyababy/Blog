{
  "version": 3,
  "sources": ["../../easy-typer-js/src/ts/index.ts"],
  "sourcesContent": ["// 配置对象typer接口\r\ninterface Typer {\r\n  output: string;\r\n  type: string;\r\n  isEnd: boolean;\r\n  speed: number;\r\n  backSpeed: number;\r\n  sleep: number;\r\n  singleBack: boolean;\r\n  sentencePause: boolean;\r\n}\r\n\r\n// 打字机模式类型接口\r\ninterface TyperAction {\r\n  rollback: Function;\r\n  normal: Function;\r\n  custom: Function;\r\n  // 这里是为了可以如数组一般取值：arr[key]形式\r\n  [key: string]: any;\r\n}\r\n\r\nclass EasyTyper {\r\n  obj: Typer; // 配置对象\r\n  input: Array<string>; // 输入源\r\n  timer: any; // 定时器\r\n  typeAction: TyperAction; // 打字机模式类型\r\n  fn: Function; // 完成输入源输出后执行的回调函数\r\n  hooks: Function; // 完成每一帧的输出后的钩子函数\r\n  constructor(obj: Typer, input: Array<string> | string, fn: Function, hooks: Function) {\r\n    checkKeyIsNull(obj);\r\n    checkFieldIsError(obj);\r\n    this.obj = obj;\r\n    this.input = typeof input === 'string' ? [input] : input;\r\n    this.fn = typeof fn === 'function' ? fn : function () { };\r\n    this.hooks = typeof hooks === 'function' ? hooks : function () { };\r\n    this.timer = 0;\r\n    this.typeAction = {\r\n      rollback: this.typedBack.bind(this),\r\n      normal: this.play.bind(this),\r\n      custom: this.fn\r\n    }\r\n    // 实例化完后立即执行打字输出\r\n    this.init();\r\n  }\r\n\r\n  // 初始化\r\n  init() {\r\n    this.play();\r\n  }\r\n\r\n  // 打字\r\n  play() {\r\n    if (!this.input.length) return this.fn(this)\r\n\r\n    let i = 0, stop = false, input = this.input.shift() || ''\r\n    this.timer = setInterval(() => {\r\n      if (i === input.length) {\r\n        i = 0\r\n        stop = true\r\n        this.closeTimer()\r\n      }\r\n\r\n      if (this.obj.isEnd) return this.closeTimer()\r\n\r\n      if (stop) return this.nextTick()\r\n\r\n      this.obj.output = input.slice(0, i + 1)\r\n      this.hooks(input.slice(0, i + 1), this)\r\n      i++\r\n    }, this.obj.speed)\r\n  }\r\n\r\n  // 回滚方法\r\n  typedBack() {\r\n    // 如果句子出书完毕，且是句子暂停模式\r\n    if (!this.input.length && this.obj.sentencePause) return this.fn(this)\r\n\r\n    let input = this.obj.output\r\n    let i = input.length, stop = false\r\n    this.timer = setInterval(() => {\r\n      if (i === -1) {\r\n        this.obj.output = ''\r\n        this.hooks('', this)\r\n        i = 0\r\n        stop = true\r\n        this.closeTimer()\r\n      }\r\n      if (this.obj.isEnd) {\r\n        this.closeTimer()\r\n        return this.obj.singleBack = false\r\n      }\r\n      if (stop) {\r\n        this.obj.singleBack = false\r\n        return (() => {\r\n          const { length } = this.input\r\n          return length ? this.play() : this.fn(this)\r\n        })()\r\n      }\r\n      this.obj.output = input.slice(0, i + 1)\r\n      this.hooks(input.slice(0, i + 1), this)\r\n      i--\r\n    }, this.obj.backSpeed)\r\n  }\r\n\r\n  // 下一次触发方式\r\n  async nextTick() {\r\n    // 等待\r\n    await this.sleep(this.obj.sleep)\r\n    return this.obj.singleBack ? this.typedBack() : this.getOutputType()\r\n  }\r\n\r\n  // 输出方式\r\n  getOutputType() {\r\n    return this.typeAction[this.obj.type](this)\r\n  }\r\n\r\n  // 关闭定时器\r\n  closeTimer() {\r\n    clearInterval(this.timer)\r\n  }\r\n\r\n  // 线程等待\r\n  sleep(ms: number) {\r\n    return new Promise(resolve => setTimeout(resolve, ms))\r\n  }\r\n\r\n  // 结束\r\n  close() {\r\n    return this.obj.isEnd = true\r\n  }\r\n\r\n}\r\n\r\n/**** 以下方法和实例都是为了编译成js后验证字段正确性 **/\r\n\r\n// 策略接口\r\ninterface TyperStrategy {\r\n  [key: string]: any\r\n}\r\n\r\n// 错误提示语\r\nconst errorTip = (message: string) => {\r\n  throw new Error(message);\r\n}\r\n\r\n// 校验参数完整性\r\nconst checkKeyIsNull = (obj: any) => {\r\n  const props: Typer = {\r\n    output: '',\r\n    type: '',\r\n    isEnd: false,\r\n    speed: 80,\r\n    backSpeed: 40,\r\n    sleep: 3000,\r\n    singleBack: false,\r\n    sentencePause: false\r\n  }\r\n  const propsKeys = Object.keys(props);\r\n  const objKeys = Object.keys(obj);\r\n\r\n  if (propsKeys.length !== objKeys.length) {\r\n    errorTip('配置对象错误: 字段数量不正确！');\r\n  }\r\n  propsKeys.forEach(key => {\r\n    if (obj[key] === undefined || obj[key] === null) {\r\n      errorTip('配置对象错误：字段值为null或undefined！');\r\n    }\r\n  })\r\n}\r\n\r\n// 检验参数类型\r\nconst checkFieldIsError = (obj: any) => {\r\n  Object.keys(obj).forEach(key => {\r\n    const proxy = EasyTyperStrategy[key](obj);\r\n    if (proxy.check()) {\r\n      proxy.showTip(key);\r\n    }\r\n  })\r\n}\r\n\r\n// 策略分发\r\nconst EasyTyperStrategy: TyperStrategy = (() => ({\r\n  output: (obj: any) => {\r\n    return new CheckField(`string`, obj.output);\r\n  },\r\n  type: (obj: any) => {\r\n    return new CheckField(`string`, obj.type);\r\n  },\r\n  isEnd: (obj: any) => {\r\n    return new CheckField(`boolean`, obj.isEnd);\r\n  },\r\n  speed: (obj: any) => {\r\n    return new CheckField(`number`, obj.speed);\r\n  },\r\n  backSpeed: (obj: any) => {\r\n    return new CheckField(`number`, obj.backSpeed);\r\n  },\r\n  sleep: (obj: any) => {\r\n    return new CheckField(`number`, obj.sleep);\r\n  },\r\n  singleBack: (obj: any) => {\r\n    return new CheckField(`boolean`, obj.singleBack);\r\n  },\r\n  sentencePause: (obj: any) => {\r\n    return new CheckField(`boolean`, obj.sentencePause);\r\n  },\r\n}))()\r\n\r\n// 字段校验类\r\nclass CheckField {\r\n  type: string;\r\n  field: any;\r\n  constructor(type: string, field: any) {\r\n    this.type = type;\r\n    this.field = field;\r\n  }\r\n  check() {\r\n    return typeof this.field !== `${this.type}`;\r\n  }\r\n  showTip(name: string) {\r\n    errorTip(`配置对象错误：属性 ${name} 必须为 ${this.type} 类型！`);\r\n  }\r\n}\r\n\r\nexport default EasyTyper;\r\n\r\n"],
  "mappings": "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",
  "names": []
}
