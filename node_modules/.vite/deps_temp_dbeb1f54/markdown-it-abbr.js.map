{
  "version": 3,
  "sources": ["../../markdown-it-abbr/index.js"],
  "sourcesContent": ["// Enclose abbreviations in <abbr> tags\n//\n'use strict';\n\n\nmodule.exports = function sub_plugin(md) {\n  var escapeRE        = md.utils.escapeRE,\n      arrayReplaceAt  = md.utils.arrayReplaceAt;\n\n  // ASCII characters in Cc, Sc, Sm, Sk categories we should terminate on;\n  // you can check character classes here:\n  // http://www.unicode.org/Public/UNIDATA/UnicodeData.txt\n  var OTHER_CHARS      = ' \\r\\n$+<=>^`|~';\n\n  var UNICODE_PUNCT_RE = md.utils.lib.ucmicro.P.source;\n  var UNICODE_SPACE_RE = md.utils.lib.ucmicro.Z.source;\n\n\n  function abbr_def(state, startLine, endLine, silent) {\n    var label, title, ch, labelStart, labelEnd,\n        pos = state.bMarks[startLine] + state.tShift[startLine],\n        max = state.eMarks[startLine];\n\n    if (pos + 2 >= max) { return false; }\n\n    if (state.src.charCodeAt(pos++) !== 0x2A/* * */) { return false; }\n    if (state.src.charCodeAt(pos++) !== 0x5B/* [ */) { return false; }\n\n    labelStart = pos;\n\n    for (; pos < max; pos++) {\n      ch = state.src.charCodeAt(pos);\n      if (ch === 0x5B /* [ */) {\n        return false;\n      } else if (ch === 0x5D /* ] */) {\n        labelEnd = pos;\n        break;\n      } else if (ch === 0x5C /* \\ */) {\n        pos++;\n      }\n    }\n\n    if (labelEnd < 0 || state.src.charCodeAt(labelEnd + 1) !== 0x3A/* : */) {\n      return false;\n    }\n\n    if (silent) { return true; }\n\n    label = state.src.slice(labelStart, labelEnd).replace(/\\\\(.)/g, '$1');\n    title = state.src.slice(labelEnd + 2, max).trim();\n    if (label.length === 0) { return false; }\n    if (title.length === 0) { return false; }\n    if (!state.env.abbreviations) { state.env.abbreviations = {}; }\n    // prepend ':' to avoid conflict with Object.prototype members\n    if (typeof state.env.abbreviations[':' + label] === 'undefined') {\n      state.env.abbreviations[':' + label] = title;\n    }\n\n    state.line = startLine + 1;\n    return true;\n  }\n\n\n  function abbr_replace(state) {\n    var i, j, l, tokens, token, text, nodes, pos, reg, m, regText, regSimple,\n        currentToken,\n        blockTokens = state.tokens;\n\n    if (!state.env.abbreviations) { return; }\n\n    regSimple = new RegExp('(?:' +\n      Object.keys(state.env.abbreviations).map(function (x) {\n        return x.substr(1);\n      }).sort(function (a, b) {\n        return b.length - a.length;\n      }).map(escapeRE).join('|') +\n    ')');\n\n    regText = '(^|' + UNICODE_PUNCT_RE + '|' + UNICODE_SPACE_RE +\n                    '|[' + OTHER_CHARS.split('').map(escapeRE).join('') + '])'\n            + '(' + Object.keys(state.env.abbreviations).map(function (x) {\n                      return x.substr(1);\n                    }).sort(function (a, b) {\n                      return b.length - a.length;\n                    }).map(escapeRE).join('|') + ')'\n            + '($|' + UNICODE_PUNCT_RE + '|' + UNICODE_SPACE_RE +\n                    '|[' + OTHER_CHARS.split('').map(escapeRE).join('') + '])';\n\n    reg = new RegExp(regText, 'g');\n\n    for (j = 0, l = blockTokens.length; j < l; j++) {\n      if (blockTokens[j].type !== 'inline') { continue; }\n      tokens = blockTokens[j].children;\n\n      // We scan from the end, to keep position when new tags added.\n      for (i = tokens.length - 1; i >= 0; i--) {\n        currentToken = tokens[i];\n        if (currentToken.type !== 'text') { continue; }\n\n        pos = 0;\n        text = currentToken.content;\n        reg.lastIndex = 0;\n        nodes = [];\n\n        // fast regexp run to determine whether there are any abbreviated words\n        // in the current token\n        if (!regSimple.test(text)) { continue; }\n\n        while ((m = reg.exec(text))) {\n          if (m.index > 0 || m[1].length > 0) {\n            token         = new state.Token('text', '', 0);\n            token.content = text.slice(pos, m.index + m[1].length);\n            nodes.push(token);\n          }\n\n          token         = new state.Token('abbr_open', 'abbr', 1);\n          token.attrs   = [ [ 'title', state.env.abbreviations[':' + m[2]] ] ];\n          nodes.push(token);\n\n          token         = new state.Token('text', '', 0);\n          token.content = m[2];\n          nodes.push(token);\n\n          token         = new state.Token('abbr_close', 'abbr', -1);\n          nodes.push(token);\n\n          reg.lastIndex -= m[3].length;\n          pos = reg.lastIndex;\n        }\n\n        if (!nodes.length) { continue; }\n\n        if (pos < text.length) {\n          token         = new state.Token('text', '', 0);\n          token.content = text.slice(pos);\n          nodes.push(token);\n        }\n\n        // replace current node\n        blockTokens[j].children = tokens = arrayReplaceAt(tokens, i, nodes);\n      }\n    }\n  }\n\n  md.block.ruler.before('reference', 'abbr_def', abbr_def, { alt: [ 'paragraph', 'reference' ] });\n\n  md.core.ruler.after('linkify', 'abbr_replace', abbr_replace);\n};\n"],
  "mappings": "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",
  "names": []
}
